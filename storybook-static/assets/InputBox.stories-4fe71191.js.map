{"version":3,"file":"InputBox.stories-4fe71191.js","sources":["../../src/hooks/useFocusedOnce.tsx","../../src/components/common/Inputs/InputBox.tsx"],"sourcesContent":["import { useState } from 'react';\n\n//input에 focused된 적이 있는지 확인하는 hook\nexport const useFocusedOnce = () => {\n  const [isFocusedOnce, setIsFocuesed] = useState(false);\n\n  const handleFocus = () => {\n    setIsFocuesed(true);\n  };\n\n  return {\n    isFocusedOnce,\n    handleFocus,\n  };\n};\n","import styled, { css } from 'styled-components';\nimport { HTMLAttributes } from 'react';\nimport { SetterOrUpdater } from 'recoil';\n\nimport { useFocusedOnce } from '@hooks/useFocusedOnce';\n\ninterface InputBoxPropsType extends HTMLAttributes<HTMLDivElement> {\n  width?: string;\n  height?: string;\n  borderRadius?: string;\n  type?: string;\n  min?: number;\n  maxLength?: number;\n  placeholder?: string;\n  value: any;\n  setValue: SetterOrUpdater<any>;\n}\n\nexport const InputBox = ({ value, setValue, ...props }: InputBoxPropsType) => {\n  const { isFocusedOnce, handleFocus } = useFocusedOnce();\n\n  const handleChangeInput = (e: React.FormEvent<HTMLInputElement>) => {\n    if (props.type === 'number' && e.currentTarget.value) {\n      setValue(Number(e.currentTarget.value));\n    } else setValue(e.currentTarget.value);\n  };\n\n  return (\n    <InputBoxContainer {...props}>\n      <StyledInput\n        onFocus={handleFocus}\n        value={value}\n        onChange={handleChangeInput}\n        type={props.type || 'text'}\n        {...props}\n        className={isFocusedOnce && value ? 'filled' : ''}\n      />\n    </InputBoxContainer>\n  );\n};\n\nconst InputBoxContainer = styled.div<{\n  width?: string;\n  height?: string;\n  borderRadius?: string;\n}>`\n  ${({ width = '300px', height = '30px' }) => css`\n    width: ${width};\n    height: ${height};\n  `}\n\n  background-color: transparent;\n`;\n\nconst StyledInput = styled.input<{ borderRadius?: string }>`\n  width: 100%;\n  height: 100%;\n  padding: 0 12px;\n\n  ${({ borderRadius = '8px' }) => css`\n    border-radius: ${borderRadius};\n  `}\n\n  outline: none;\n  border: 1px solid ${({ theme }) => theme.colors.gray_400};\n\n  &:focus {\n    border: 1px solid ${({ theme }) => theme.colors.green};\n  }\n  &.filled {\n    border: 1px solid ${({ theme }) => theme.colors.green};\n  }\n\n  font-family: 'PretendardMedium';\n  color: ${({ theme }) => theme.colors.gray_900};\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.gray_500};\n  }\n`;\n"],"names":["useFocusedOnce","isFocusedOnce","setIsFocuesed","useState","InputBox","value","setValue","props","handleFocus","jsx","InputBoxContainer","StyledInput","e","styled","width","height","css","borderRadius","theme"],"mappings":"6LAGO,MAAMA,EAAiB,IAAM,CAClC,KAAM,CAACC,EAAeC,CAAa,EAAIC,WAAS,EAAK,EAM9C,MAAA,CACL,cAAAF,EACA,YANkB,IAAM,CACxBC,EAAc,EAAI,CAAA,CAKlB,CAEJ,ECIOE,EAAA,CAAA,CAAA,MAAAC,EAAA,SAAAC,EAAA,GAAAC,CAAA,IAAA,CACL,KAAA,CAAA,cAAAN,EAAA,YAAAO,CAAA,EAAAR,EAAA,EAQA,OAAAS,EAAAC,EAAA,CAAA,GAAAH,EAAA,SAAAE,EAEIE,EAAC,CAAA,QAAAH,EACU,MAAAH,EACT,SAVNO,GAAA,CACEL,EAAA,OAAA,UAAAK,EAAA,cAAA,MACEN,EAAA,OAAAM,EAAA,cAAA,KAAA,CAAA,EACKN,EAAAM,EAAA,cAAA,KAAA,CAA8B,EAQvB,KAAAL,EAAA,MAAA,OACU,GAAAA,EAChB,UAAAN,GAAAI,EAAA,SAAA,EAC2C,CAAA,CAAA,CAAA,CAIvD,EAEAK,EAAAG,EAAA;AAAA,IAAiC,CAAA,CAAA,MAAAC,EAAA,QAAA,OAAAC,EAAA,MAAA,IAAAC;AAAAA,aAKaF,CAAA;AAAA,cAC5BC,CAAA;AAAA,GACE;AAAA;AAAA;AAAA,EAMpBJ,EAAAE,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA2B,CAAA,CAAA,aAAAI,EAAA,KAAA,IAAAD;AAAAA,qBAKOC,CAAA;AAAA,GACD;AAAA;AAAA;AAAA,sBAC9B,CAAA,CAAA,MAAAC,CAAA,IAAAA,EAAA,OAAA,QAAA;AAAA;AAAA;AAAA,wBAGuD,CAAA,CAAA,MAAAA,CAAA,IAAAA,EAAA,OAAA,KAAA;AAAA;AAAA;AAAA,wBAGD,CAAA,CAAA,MAAAA,CAAA,IAAAA,EAAA,OAAA,KAAA;AAAA;AAAA;AAAA;AAAA,WAGA,CAAA,CAAA,MAAAA,CAAA,IAAAA,EAAA,OAAA,QAAA;AAAA;AAAA,aAIV,CAAA,CAAA,MAAAA,CAAA,IAAAA,EAAA,OAAA,QAAA;AAAA;AAAA;;;;;;;;"}